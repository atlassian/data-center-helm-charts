---
# Source: crowd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: unittest-crowd
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: crowd/templates/config-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-crowd-jvm-config
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
data:
  additional_jvm_args: >-
    -Dcluster.node.name=${KUBE_POD_NAME}
    -Datlassian.logging.cloud.enabled=false
    -XX:ActiveProcessorCount=2
    -javaagent:/var/atlassian/application-data/crowd/shared/jmx_prometheus_javaagent.jar=9999:/opt/atlassian/jmx/jmx-config.yaml
  max_heap: 768m
  min_heap: 384m
---
# Source: crowd/templates/configmap-jmx-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-crowd-jmx-config
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
data:
  jmx-config.yaml: |
    rules:
      - pattern: '(java.lang)<type=(\w+)><>(\w+):'
        name: java_lang_$2_$3
        labels:
          product: "crowd"
      - pattern: 'java.lang<type=Memory><HeapMemoryUsage>(\w+)'
        name: java_lang_Memory_HeapMemoryUsage_$1
        labels:
          product: "crowd"
      - pattern: 'java.lang<name=G1 (\w+) Generation, type=GarbageCollector><>(\w+)'
        name: java_lang_G1_$1_Generation_$2
        labels:
          product: "crowd"
      - pattern: '.*'
---
# Source: crowd/templates/service-jmx.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-crowd-jmx
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 9999
      targetPort: jmx
      name: jmx
  selector:
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
---
# Source: crowd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-crowd
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
---
# Source: crowd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: unittest-crowd
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: unittest-crowd
  selector:
    matchLabels:
      app.kubernetes.io/name: crowd
      app.kubernetes.io/instance: unittest-crowd
  template:
    metadata:
      annotations:
        checksum/config-jvm: 85a1282caf4b4288432b374947ed00d2802f0513e40066921d87c8a749530b1e
      labels:
        app.kubernetes.io/name: crowd
        app.kubernetes.io/instance: unittest-crowd
    spec:
      serviceAccountName: unittest-crowd
      terminationGracePeriodSeconds: 30
      hostAliases:
        - hostnames:
          - foo.local
          - bar.local
          ip: 127.0.0.1
      securityContext:
        fsGroup: 2004
      initContainers:
        - name: nfs-permission-fixer
          image: alpine:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0 # make sure we run as root so we get the ability to change the volume permissions
          volumeMounts:
            - name: shared-home
              mountPath: "/shared-home"
          command: ["sh", "-c", "(chgrp 2004 /shared-home; chmod g+w /shared-home)"]
        - name: fetch-jmx-exporter
          image: bitnami/jmx-exporter:0.18.0
          command: ["cp"]
          args: ["/opt/bitnami/jmx-exporter/jmx_prometheus_javaagent.jar", "/var/atlassian/application-data/crowd/shared"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: "/var/atlassian/application-data/crowd/shared"
              name: shared-home
      containers:
        - name: crowd
          image: "atlassian/crowd:5.1.3"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8095
              protocol: TCP
            - name: jmx
              containerPort: 9999
              protocol: TCP
          readinessProbe:
            httpGet:
              port: 8095
              path: /crowd/status
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30
          startupProbe:
            tcpSocket:
              port: 8095
            periodSeconds: 5
            failureThreshold: 120
          livenessProbe:
            tcpSocket:
              port: 8095
            periodSeconds: 5
            failureThreshold: 1
          resources:
            requests:
              cpu: "2"
              memory: 1G
          volumeMounts:
            - name: local-home
              mountPath: "/var/atlassian/application-data/crowd"
            - name: local-home
              mountPath: "/opt/atlassian/crowd/apache-tomcat/logs"
              subPath: "logs"
            - name: shared-home
              mountPath: "/var/atlassian/application-data/crowd/shared"
            - name: jmx-config
              mountPath: /opt/atlassian/jmx
          env:
            - name: KUBE_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ATL_TOMCAT_SCHEME
              value: "https"
            - name: ATL_TOMCAT_SECURE
              value: "true"
            - name: ATL_TOMCAT_PORT
              value: "8095"
            - name: ATL_TOMCAT_ACCESS_LOG
              value: "true"
            - name: UMASK
              value: "0022"
            - name: SET_PERMISSIONS
              value: "true"
            - name: ATL_PRODUCT_HOME_SHARED
              value: "/var/atlassian/application-data/crowd/shared"
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              valueFrom:
                configMapKeyRef:
                  key: additional_jvm_args
                  name: unittest-crowd-jvm-config
            - name: JVM_MINIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: min_heap
                  name: unittest-crowd-jvm-config
            - name: JVM_MAXIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: max_heap
                  name: unittest-crowd-jvm-config
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "/shutdown-wait.sh"]
      priorityClassName: high
      volumes:
        - name: local-home
          emptyDir: {}
        - name: shared-home
          emptyDir: {}
        - name: jmx-config
          configMap:
            name: unittest-crowd-jmx-config
---
# Source: crowd/templates/tests/test-application-status.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "unittest-crowd-application-status-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  containers:
    - name: test
      image: alpine
      env:
        - name: STATUS_URL
          value: "http://unittest-crowd:80/crowd/status"
      command:
        - /bin/sh
        - -ec
        - |
          apk add -q jq curl
          STATUS=$(curl -s "$STATUS_URL")
          echo "Verifying application state is RUNNING or FIRST_RUN: $STATUS"
          echo $STATUS | jq -e '.state|test("RUNNING|FIRST_RUN")'
  restartPolicy: Never
---
# Source: crowd/templates/tests/test-shared-home-permissions.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "unittest-crowd-shared-home-permissions-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: crowd-1.13.0
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: unittest-crowd
    app.kubernetes.io/version: "5.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  containers:
    - name: test
      image: debian:stable-slim
      imagePullPolicy: IfNotPresent
      securityContext:
        # We assume that the UID and GID used by the product images are the same, which in practice they are
        runAsUser: 2004
        runAsGroup: 2004
      volumeMounts:
        - name: shared-home
          mountPath: /shared-home
      command:
        - /bin/sh
        - -ec
        - |
          ls -ld /shared-home
          echo "Creating temporary file in shared home as user $(id -u):$(id -g)"
          touch /shared-home/permissions-test
          ls -l /shared-home/permissions-test
          rm /shared-home/permissions-test
  volumes:
    - name: shared-home
      emptyDir: {}
  restartPolicy: Never
