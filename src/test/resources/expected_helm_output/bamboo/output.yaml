---
# Source: bamboo/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: unittest-bamboo
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: bamboo/templates/config-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-bamboo-jvm-config
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  additional_jvm_args: >-
    -XX:ActiveProcessorCount=2
    -javaagent:/var/atlassian/application-data/shared-home/jmx_prometheus_javaagent.jar=9999:/opt/atlassian/jmx/jmx-config.yaml
  max_heap: 1024m
  min_heap: 512m
---
# Source: bamboo/templates/configmap-jmx-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-bamboo-jmx-config
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  jmx-config.yaml: |
    rules:
      - pattern: '(java.lang)<type=(\w+)><>(\w+):'
        name: java_lang_$2_$3
        labels:
          product: "bamboo"
      - pattern: 'java.lang<type=Memory><HeapMemoryUsage>(\w+)'
        name: java_lang_Memory_HeapMemoryUsage_$1
        labels:
          product: "bamboo"
      - pattern: 'java.lang<name=G1 (\w+) Generation, type=GarbageCollector><>(\w+)'
        name: java_lang_G1_$1_Generation_$2
        labels:
          product: "bamboo"
      - pattern: '.*'
---
# Source: bamboo/templates/configmap-values-analytics.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-bamboo-helm-values
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  values.yaml: |
    additionalConfigMaps: []
    additionalContainers: []
    additionalFiles: []
    additionalHosts:
    - hostnames:
      - foo.local
      - bar.local
      ip: 127.0.0.1
    additionalInitContainers: []
    additionalLabels: {}
    affinity: {}
    atlassianAnalyticsAndSupport:
      analytics:
        enabled: true
      helmValues:
        enabled: true
    bamboo:
      accessLog:
        localHomeSubPath: log
        mountPath: /opt/atlassian/bamboo/logs
      additionalBundledPlugins: []
      additionalCertificates:
        customCmd: null
        secretName: null
      additionalEnvironmentVariables: []
      additionalJvmArgs: []
      additionalLibraries: []
      additionalPorts: []
      additionalVolumeClaimTemplates: []
      additionalVolumeMounts: []
      baseUrl: https://testUrl/
      brokerUrl: tcp://testBroker:1234
      containerSecurityContext: {}
      disableAgentAuth: false
      forceConfigUpdate: false
      import:
        path: null
        type: clean
      jmsService:
        annotations: {}
        enabled: true
        loadBalancerIP: null
        port: 54663
        type: ClusterIP
      license:
        secretKey: licenseTestKey
        secretName: licenseTestSecret
      livenessProbe:
        enabled: false
        failureThreshold: 12
        initialDelaySeconds: 60
        periodSeconds: 5
        timeoutSeconds: 1
      ports:
        http: 8085
        jms: 54663
      readinessProbe:
        customProbe: {}
        enabled: true
        failureThreshold: 30
        initialDelaySeconds: 30
        periodSeconds: 10
        timeoutSeconds: 1
      resources:
        container:
          requests:
            cpu: "2"
            memory: 2G
        jvm:
          maxHeap: 1024m
          minHeap: 512m
      securityContext:
        fsGroup: 2005
      securityContextEnabled: true
      securityToken:
        secretKey: agentTestKey
        secretName: agentTestSecret
      service:
        annotations: {}
        contextPath: null
        loadBalancerIP: null
        port: 80
        sessionAffinity: None
        sessionAffinityConfig:
          clientIP:
            timeoutSeconds: null
        type: ClusterIP
      setPermissions: true
      shutdown:
        command: /shutdown-wait.sh
        terminationGracePeriodSeconds: 30
      startupProbe:
        enabled: false
        failureThreshold: 120
        initialDelaySeconds: 60
        periodSeconds: 5
      sysadminCredentials:
        displayNameSecretKey: adminFullnameTestKey
        emailAddressSecretKey: adminEmailTestKey
        passwordSecretKey: adminPasswordTestKey
        secretName: adminTestSecret
        usernameSecretKey: adminTestUsernameKey
      topologySpreadConstraints: []
      unattendedSetup: true
      useHelmReleaseNameAsContainerName: false
    common:
      global: {}
    database:
      credentials:
        passwordSecretKey: password
        secretName: null
        usernameSecretKey: username
      type: null
      url: null
    fluentd:
      command: null
      customConfigFile: false
      elasticsearch:
        enabled: true
        hostname: elasticsearch
        indexNamePrefix: bamboo
      enabled: false
      extraVolumes: []
      fluentdCustomConfig: {}
      httpPort: 9880
      imageRepo: fluent/fluentd-kubernetes-daemonset
      imageTag: v1.11.5-debian-elasticsearch7-1.2
      resources: {}
    image:
      pullPolicy: IfNotPresent
      repository: atlassian/bamboo
      tag: ""
    ingress:
      annotations: {}
      className: nginx
      create: false
      host: null
      https: true
      maxBodySize: 250m
      nginx: true
      path: null
      proxyConnectTimeout: 60
      proxyReadTimeout: 60
      proxySendTimeout: 60
      tlsSecretName: null
    monitoring:
      exposeJmxMetrics: true
      fetchJmxExporterJar: true
      grafana:
        createDashboards: false
        dashboardAnnotations: {}
        dashboardLabels: {}
      jmxExporterCustomConfig: {}
      jmxExporterCustomJarLocation: null
      jmxExporterImageRepo: bitnami/jmx-exporter
      jmxExporterImageTag: 0.18.0
      jmxExporterInitContainer:
        customSecurityContext: {}
        resources: {}
        runAsRoot: true
      jmxExporterPort: 9999
      jmxExporterPortType: ClusterIP
      jmxServiceAnnotations: {}
      serviceMonitor:
        create: false
        prometheusLabelSelector: {}
        scrapeIntervalSeconds: 30
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: null
      minAvailable: null
    podLabels: {}
    priorityClassName: high
    replicaCount: 1
    serviceAccount:
      annotations: {}
      create: true
      imagePullSecrets: []
      name: null
    testPods:
      affinity: {}
      annotations: {}
      image:
        permissionsTestContainer: debian:stable-slim
        statusTestContainer: alpine:latest
      labels: {}
      nodeSelector: {}
      schedulerName: null
      tolerations: []
    tolerations: []
    volumes:
      additional: []
      localHome:
        customVolume: {}
        mountPath: /var/atlassian/application-data/bamboo
        persistentVolumeClaim:
          create: false
          resources:
            requests:
              storage: 1Gi
          storageClassName: null
      sharedHome:
        customVolume: {}
        mountPath: /var/atlassian/application-data/shared-home
        nfsPermissionFixer:
          command: null
          enabled: true
          imageRepo: alpine
          imageTag: latest
          mountPath: /shared-home
          resources: {}
        persistentVolumeClaim:
          create: false
          resources:
            requests:
              storage: 1Gi
          storageClassName: null
        subPath: null
  analytics.json: |
    {
      "imageTag": "9.4.1",
      "replicas": 1,
      "isJmxEnabled": true,
      "ingressType": "NONE",
      "k8sVersion": "1.24",
      "serviceType": "CLUSTER_IP",
      "dbType": "UNKNOWN",
      "isSharedHomePVCCreated": false,
      "isServiceMonitorCreated": false,
      "isGrafanaDashboardsCreated": false
    }
---
# Source: bamboo/templates/service-jms.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bamboo-jms
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 54663
      targetPort: jms
      protocol: TCP
      name: jms
  selector:
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
---
# Source: bamboo/templates/service-jmx.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bamboo-jmx
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 9999
      targetPort: jmx
      name: jmx
  selector:
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
---
# Source: bamboo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bamboo
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
---
# Source: bamboo/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: unittest-bamboo
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: unittest-bamboo
  selector:
    matchLabels:
      app.kubernetes.io/name: bamboo
      app.kubernetes.io/instance: unittest-bamboo
  template:
    metadata:
      annotations:
        checksum/config-jvm: 87b697c0ecf75445766b13f8c1aedeefbb0f656c5365a43e418d166380e67b0e
      labels:
        app.kubernetes.io/name: bamboo
        app.kubernetes.io/instance: unittest-bamboo
    spec:
      serviceAccountName: unittest-bamboo
      terminationGracePeriodSeconds: 30
      hostAliases:
        - hostnames:
          - foo.local
          - bar.local
          ip: 127.0.0.1
      securityContext:
        fsGroup: 2005
      initContainers:
        - name: nfs-permission-fixer
          image: alpine:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0 # make sure we run as root so we get the ability to change the volume permissions
          volumeMounts:
            - name: shared-home
              mountPath: "/shared-home"
          command: ["sh", "-c", "(chgrp 2005 /shared-home; chmod g+w /shared-home)"]
        - name: fetch-jmx-exporter
          image: bitnami/jmx-exporter:0.18.0
          command: ["cp"]
          args: ["/opt/bitnami/jmx-exporter/jmx_prometheus_javaagent.jar", "/var/atlassian/application-data/shared-home"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: "/var/atlassian/application-data/shared-home"
              name: shared-home
      containers:
        - name: bamboo
          image: "atlassian/bamboo:9.4.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: ATL_TOMCAT_SCHEME
              value: "https"
            - name: ATL_TOMCAT_SECURE
              value: "true"
            - name: ATL_BASE_URL
              value: "http://localhost:8085/"
            - name: ATL_TOMCAT_PORT
              value: "8085"
            - name: SET_PERMISSIONS
              value: "true"
            - name: BAMBOO_SHARED_HOME
              value: "/var/atlassian/application-data/shared-home"
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              valueFrom:
                configMapKeyRef:
                  key: additional_jvm_args
                  name: unittest-bamboo-jvm-config
            - name: JVM_MINIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: min_heap
                  name: unittest-bamboo-jvm-config
            - name: JVM_MAXIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: max_heap
                  name: unittest-bamboo-jvm-config
            - name: ATL_CLIENT_BROKER_URL
              value: "tcp://testBroker:1234"
            - name: SECURITY_TOKEN
              valueFrom:
                secretKeyRef:
                  name: agentTestSecret
                  key: agentTestKey
            - name: ATL_LICENSE
              valueFrom:
                secretKeyRef:
                  name: licenseTestSecret
                  key: licenseTestKey
            - name: ATL_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: adminTestSecret
                  key: adminTestUsernameKey
            - name: ATL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: adminTestSecret
                  key: adminPasswordTestKey
            - name: ATL_ADMIN_FULLNAME
              valueFrom:
                secretKeyRef:
                  name: adminTestSecret
                  key: adminFullnameTestKey
            - name: ATL_ADMIN_EMAIL
              valueFrom:
                secretKeyRef:
                  name: adminTestSecret
                  key: adminEmailTestKey
            - name: ATL_IMPORT_OPTION
              value: clean
            - name: ATL_IMPORT_PATH
              value: 
            - name: ATL_BAMBOO_ENABLE_UNATTENDED_SETUP
              value: "true"
          ports:
            - name: http
              containerPort: 8085
              protocol: TCP
            - name: jms
              containerPort: 54663
              protocol: TCP
            - name: jmx
              containerPort: 9999
              protocol: TCP
          readinessProbe:
            httpGet:
              port: 8085
              path: /rest/api/latest/status
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 30
          resources:
            requests:
              cpu: "2"
              memory: 2G
          volumeMounts:
            - name: local-home
              mountPath: "/var/atlassian/application-data/bamboo"
            - name: local-home
              mountPath: "/opt/atlassian/bamboo/logs"
              subPath: "log"
            - name: shared-home
              mountPath: "/var/atlassian/application-data/shared-home"
            - name: helm-values
              mountPath: /opt/atlassian/helm
            - name: jmx-config
              mountPath: /opt/atlassian/jmx
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "/shutdown-wait.sh"]
      priorityClassName: high
      volumes:
        - name: local-home
          emptyDir: {}
        - name: shared-home
          emptyDir: {}
        - name: helm-values
          configMap:
            name: unittest-bamboo-helm-values
        - name: jmx-config
          configMap:
            name: unittest-bamboo-jmx-config
---
# Source: bamboo/templates/tests/test-application-status.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "unittest-bamboo-application-status-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  containers:
    - name: test
      image: alpine
      imagePullPolicy: IfNotPresent
      env:
        - name: STATUS_URL
          value: "http://unittest-bamboo:80/rest/api/latest/status"
      command:
        - /bin/sh
        - -c
        - |
          apk add -q jq curl
          count=1
          while [ $count -le 20 ]
          do
            STATUS=$(curl -s "$STATUS_URL")
            RESPONSE_CODE=$(curl -s -o /dev/null -I -w "%{http_code}" "$STATUS_URL")
            echo "Status URL is: $STATUS_URL"
            echo "Response code for status test: $RESPONSE_CODE"
            echo "Verifying application state is RUNNING or FIRST_RUN: $STATUS"
            echo $STATUS | jq -e '.status|test("RUNNING|FIRST_RUN")'
            if [ $? == 0 ]; then
              exit 0
            fi
            sleep 10
            count=$(( $count + 1 ))
          done
  restartPolicy: Never
---
# Source: bamboo/templates/tests/test-shared-home-permissions.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "unittest-bamboo-shared-home-permissions-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: bamboo-1.16.6
    app.kubernetes.io/name: bamboo
    app.kubernetes.io/instance: unittest-bamboo
    app.kubernetes.io/version: "9.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  containers:
    - name: test
      image: debian:stable-slim
      imagePullPolicy: IfNotPresent
      securityContext:
        # We assume that the UID and GID used by the product images are the same, which in practice they are
        runAsUser: 2005
        runAsGroup: 2005
      volumeMounts:
        - name: shared-home
          mountPath: /shared-home
      command:
        - /bin/sh
        - -ec
        - |
          ls -ld /shared-home
          echo "Creating temporary file in shared home as user $(id -u):$(id -g)"
          touch /shared-home/permissions-test
          ls -l /shared-home/permissions-test
          rm /shared-home/permissions-test
  volumes:
    - name: shared-home
      emptyDir: {}
  restartPolicy: Never
