---
# Source: bitbucket/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: unittest-bitbucket
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
---
# Source: bitbucket/templates/config-jvm-mesh.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-bitbucket-jvm-config-mesh
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
data:
  additional_jvm_args: >-
    -XX:ActiveProcessorCount=1
    -javaagent:/var/atlassian/application-data/mesh/jmx_prometheus_javaagent.jar=9999:/opt/atlassian/jmx/jmx-config.yaml
  max_heap: 1g
  min_heap: 512m
---
# Source: bitbucket/templates/config-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-bitbucket-jvm-config
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
data:
  additional_jvm_args: >-
    -XX:ActiveProcessorCount=2
    -javaagent:/var/atlassian/application-data/shared-home/jmx_prometheus_javaagent.jar=9999:/opt/atlassian/jmx/jmx-config.yaml
    -Dplugin.bitbucket-git.mesh.sidecar.jvmArgs=-javaagent:/var/atlassian/application-data/shared-home/jmx_prometheus_javaagent.jar=9998:/opt/atlassian/jmx/jmx-config.yaml
  max_heap: 1g
  min_heap: 512m
---
# Source: bitbucket/templates/configmap-jmx-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-bitbucket-jmx-config
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
data:
  jmx-config.yaml: |
    rules:
    - pattern: '(java.lang)<type=(\w+)><>(\w+):'
      name: java_lang_$2_$3
    - pattern: 'java.lang<type=Memory><HeapMemoryUsage>(\w+)'
      name: java_lang_Memory_HeapMemoryUsage_$1
    - pattern: 'java.lang<name=G1 (\w+) Generation, type=GarbageCollector><>(\w+)'
      name: java_lang_G1_$1_Generation_$2
    - pattern: '.*'
---
# Source: bitbucket/templates/configmap-values-analytics.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unittest-bitbucket-helm-values
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
data:
  values.yaml: |
    additionalConfigMaps: []
    additionalContainers: []
    additionalFiles: []
    additionalHosts:
    - hostnames:
      - foo.local
      - bar.local
      ip: 127.0.0.1
    additionalInitContainers: []
    additionalLabels: {}
    affinity: {}
    atlassianAnalyticsAndSupport:
      analytics:
        enabled: false
      helmValues:
        enabled: true
    bitbucket:
      additionalAnnotations:
        argocd.argoproj.io/sync-wave: "10"
      additionalBundledPlugins: []
      additionalCertificates:
        customCmd: null
        initContainer:
          resources: {}
        secretList: []
        secretName: null
      additionalEnvironmentVariables: []
      additionalJvmArgs: []
      additionalLibraries: []
      additionalPorts: []
      additionalVolumeClaimTemplates: []
      additionalVolumeMounts: []
      applicationMode: default
      clustering:
        enabled: false
        group:
          nameSecretKey: name
          passwordSecretKey: password
          secretName: null
      containerSecurityContext: {}
      elasticSearch:
        baseUrl: null
        credentials:
          passwordSecretKey: password
          secretName: null
          usernameSecretKey: username
      hazelcastService:
        annotations: {}
        enabled: false
        port: 5701
        type: ClusterIP
      license:
        secretKey: license-key
        secretName: null
      livenessProbe:
        customProbe: {}
        enabled: false
        failureThreshold: 12
        initialDelaySeconds: 60
        periodSeconds: 5
        timeoutSeconds: 1
      mesh:
        additionalAnnotations:
          argocd.argoproj.io/sync-wave: "10"
        additionalCertificates:
          customCmd: null
          initContainer:
            resources: {}
          secretList: []
          secretName: null
        additionalEnvironmentVariables: {}
        additionalFiles: null
        additionalInitContainers: {}
        additionalJvmArgs: []
        affinity: {}
        enabled: true
        image:
          pullPolicy: IfNotPresent
          repository: atlassian/bitbucket-mesh
          tag: 2.0.1
        nodeAutoRegistration: false
        nodeSelector: {}
        podAnnotations: {}
        podLabels: {}
        podManagementPolicy: OrderedReady
        priorityClassName: high
        replicaCount: 3
        resources:
          container:
            limits:
              cpu: "2"
              memory: 2G
            requests:
              cpu: "1"
              memory: 2G
          jvm:
            maxHeap: 1g
            minHeap: 512m
        schedulerName: null
        service:
          annotations: {}
          loadBalancerIP: null
          port: 7777
          type: ClusterIP
        setByDefault: false
        shutdown:
          terminationGracePeriodSeconds: 35
        tolerations: {}
        topologySpreadConstraints: {}
        volume:
          create: true
          mountPath: /var/atlassian/application-data/mesh
          persistentVolumeClaimRetentionPolicy:
            whenDeleted: null
            whenScaled: null
          resources:
            requests:
              storage: 1Gi
          storageClass: null
      mirror:
        upstreamUrl: null
      podManagementStrategy: OrderedReady
      ports:
        hazelcast: 5701
        http: 7990
        ssh: 7999
      postStart:
        command: null
      readinessProbe:
        customProbe: {}
        enabled: true
        failureThreshold: 60
        initialDelaySeconds: 10
        periodSeconds: 5
        timeoutSeconds: 1
      resources:
        container:
          requests:
            cpu: "2"
            memory: 2G
        jvm:
          maxHeap: 1g
          minHeap: 512m
      securityContext:
        fsGroup: 2003
      securityContextEnabled: true
      service:
        annotations: {}
        contextPath: null
        loadBalancerIP: null
        port: 80
        sessionAffinity: None
        sessionAffinityConfig:
          clientIP:
            timeoutSeconds: null
        sshPort: 7999
        type: ClusterIP
      setPermissions: true
      shutdown:
        command: /shutdown-wait.sh
        terminationGracePeriodSeconds: 35
      sshService:
        annotations: {}
        enabled: false
        host: null
        loadBalancerIP: null
        port: 22
        type: LoadBalancer
      startupProbe:
        enabled: false
        failureThreshold: 120
        initialDelaySeconds: 60
        periodSeconds: 5
      sysadminCredentials:
        displayNameSecretKey: displayName
        emailAddressSecretKey: emailAddress
        passwordSecretKey: password
        secretName: null
        usernameSecretKey: username
      topologySpreadConstraints: []
      useHelmReleaseNameAsContainerName: false
    common:
      global: {}
    database:
      credentials:
        passwordSecretKey: password
        secretName: null
        usernameSecretKey: username
      driver: null
      url: null
    fluentd:
      command: null
      customConfigFile: false
      elasticsearch:
        enabled: true
        hostname: elasticsearch
      enabled: false
      extraVolumes: []
      fluentdCustomConfig: {}
      imageRepo: fluent/fluentd-kubernetes-daemonset
      imageTag: v1.11.5-debian-elasticsearch7-1.2
      resources: {}
    image:
      pullPolicy: IfNotPresent
      repository: atlassian/bitbucket
      tag: ""
    ingress:
      annotations: {}
      className: nginx
      create: false
      host: null
      https: true
      maxBodySize: 250m
      nginx: true
      openShiftRoute: false
      path: null
      proxyConnectTimeout: 60
      proxyReadTimeout: 60
      proxySendTimeout: 60
      routeHttpHeaders: {}
      tlsSecretName: null
    monitoring:
      exposeJmxMetrics: true
      fetchJmxExporterJar: true
      grafana:
        createDashboards: false
        dashboardAnnotations: {}
        dashboardLabels: {}
      jmxExporterCustomConfig: {}
      jmxExporterCustomJarLocation: null
      jmxExporterImageRepo: bitnami/jmx-exporter
      jmxExporterImageTag: 0.18.0
      jmxExporterInitContainer:
        customSecurityContext: {}
        jmxJarLocation: null
        resources: {}
        runAsRoot: true
      jmxExporterPort: 9999
      jmxExporterPortType: ClusterIP
      jmxServiceAnnotations: {}
      serviceMonitor:
        create: false
        prometheusLabelSelector: {}
        scrapeIntervalSeconds: 30
    nodeSelector: {}
    opensearch:
      baseUrl: null
      credentials:
        passwordSecretKey: password
        secretName: null
        usernameSecretKey: username
      envFrom:
      - secretRef:
          name: opensearch-initial-password
      extraEnvs:
      - name: plugins.security.ssl.http.enabled
        value: "false"
      install: false
      persistence:
        size: 10Gi
      resources:
        requests:
          cpu: 1
          memory: 1Gi
      securityConfig:
        internalUsersSecret: null
      singleNode: true
    openshift:
      runWithRestrictedSCC: false
    ordinals:
      enabled: false
      start: 0
    podAnnotations: {}
    podDisruptionBudget:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: null
      minAvailable: null
    podLabels: {}
    priorityClassName: high
    replicaCount: 1
    serviceAccount:
      annotations: {}
      clusterRole:
        create: false
        name: null
      clusterRoleBinding:
        create: false
        name: null
      create: true
      imagePullSecrets: []
      name: null
      role:
        create: true
      roleBinding:
        create: true
    testPods:
      affinity: {}
      annotations: {}
      image:
        permissionsTestContainer: debian:stable-slim
        statusTestContainer: alpine:latest
      labels: {}
      nodeSelector: {}
      resources: {}
      schedulerName: null
      tolerations: []
    tolerations: []
    updateStrategy: {}
    volumes:
      additional: []
      localHome:
        customVolume: {}
        mountPath: /var/atlassian/application-data/bitbucket
        persistentVolumeClaim:
          create: false
          resources:
            requests:
              storage: 1Gi
          storageClassName: null
        persistentVolumeClaimRetentionPolicy:
          whenDeleted: null
          whenScaled: null
      sharedHome:
        customVolume: {}
        mountPath: /var/atlassian/application-data/shared-home
        nfsPermissionFixer:
          command: null
          enabled: true
          imageRepo: alpine
          imageTag: latest
          mountPath: /shared-home
          resources: {}
        persistentVolume:
          create: false
          mountOptions: []
          nfs:
            path: ""
            server: ""
        persistentVolumeClaim:
          accessMode: ReadWriteMany
          create: false
          resources:
            requests:
              storage: 1Gi
          storageClassName: null
          volumeName: null
        subPath: null
---
# Source: bitbucket/templates/service-jmx.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bitbucket-jmx
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 9999
      targetPort: jmx
      appProtocol: http
      name: jmx
    - port: 9998
      targetPort: 9998
      name: jmx-mesh-sidecar
  selector:
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
---
# Source: bitbucket/templates/service-mesh.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bitbucket-mesh-0
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 7777
      targetPort: mesh
      protocol: TCP
      name: mesh
    - port: 9999
      targetPort: jmx
      appProtocol: http
      name: jmx
  selector:
    statefulset.kubernetes.io/pod-name: unittest-bitbucket-mesh-0
---
# Source: bitbucket/templates/service-mesh.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bitbucket-mesh-1
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 7777
      targetPort: mesh
      protocol: TCP
      name: mesh
    - port: 9999
      targetPort: jmx
      appProtocol: http
      name: jmx
  selector:
    statefulset.kubernetes.io/pod-name: unittest-bitbucket-mesh-1
---
# Source: bitbucket/templates/service-mesh.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bitbucket-mesh-2
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 7777
      targetPort: mesh
      protocol: TCP
      name: mesh
    - port: 9999
      targetPort: jmx
      appProtocol: http
      name: jmx
  selector:
    statefulset.kubernetes.io/pod-name: unittest-bitbucket-mesh-2
---
# Source: bitbucket/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: unittest-bitbucket
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 7999
      targetPort: ssh
      protocol: TCP
      name: ssh
    - port: 5701
      targetPort: hazelcast
      protocol: TCP
      name: hazelcast
  selector:
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
---
# Source: bitbucket/templates/statefulset-mesh.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: unittest-bitbucket-mesh
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  replicas: 3
  podManagementPolicy: OrderedReady
  serviceName: unittest-bitbucket-mesh
  selector:
    matchLabels:
      app.kubernetes.io/name: bitbucket-mesh
      app.kubernetes.io/instance: unittest-bitbucket
  template:
    metadata:
      annotations:
        checksum/config-jvm: daf77dbb6115393d5de995314ed57f1fc3d7333a41fb26e69f17dea959df0af6
      labels:
        app.kubernetes.io/name: bitbucket-mesh
        app.kubernetes.io/instance: unittest-bitbucket
    spec:
      serviceAccountName: unittest-bitbucket
      terminationGracePeriodSeconds: 35
      hostAliases:
        - hostnames:
          - foo.local
          - bar.local
          ip: 127.0.0.1
      initContainers:
        - name: fetch-jmx-exporter
          image: bitnami/jmx-exporter:0.18.0
          command: ["cp"]
          args: ["/opt/bitnami/jmx-exporter/jmx_prometheus_javaagent.jar", "/var/atlassian/application-data/mesh"]
          volumeMounts:
            - mountPath: "/var/atlassian/application-data/mesh"
              name: mesh-home
          securityContext:
            runAsUser: 0
      containers:
        - name: bitbucket-mesh
          image: atlassian/bitbucket-mesh:2.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - name: mesh
              containerPort: 7777
              protocol: TCP
            - name: jmx
              containerPort: 9999
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 7777
            periodSeconds: 5
            failureThreshold: 60
            initialDelaySeconds: 10
          volumeMounts:
            - name: mesh-home
              mountPath: "/var/atlassian/application-data/mesh"
            - name: jmx-config
              mountPath: /opt/atlassian/jmx
          resources:
            limits:
              cpu: "2"
              memory: 2G
            requests:
              cpu: "1"
              memory: 2G
          env:
            - name: GRPC_SERVER_PORT
              value: "7777"
            - name: MESH_HOME
              value: /var/atlassian/application-data/mesh
            - name: KUBE_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: "-Dcluster.node.name=$(KUBE_POD_NAME)"
            - name: JVM_MINIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: min_heap
                  name: unittest-bitbucket-jvm-config-mesh
            - name: JVM_MAXIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: max_heap
                  name: unittest-bitbucket-jvm-config-mesh
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              valueFrom:
                configMapKeyRef:
                  key: additional_jvm_args
                  name: unittest-bitbucket-jvm-config-mesh
            - name: JMX_ENABLED
              value: "true"
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "/shutdown-wait.sh"]
      priorityClassName: high
      volumes:
        - name: jmx-config
          configMap:
            name: unittest-bitbucket-jmx-config
  volumeClaimTemplates:
  - metadata:
      name: mesh-home
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
# Source: bitbucket/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: unittest-bitbucket
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  serviceName: unittest-bitbucket
  selector:
    matchLabels:
      app.kubernetes.io/name: bitbucket
      app.kubernetes.io/instance: unittest-bitbucket
  template:
    metadata:
      annotations:
        checksum/config-jvm: aae0751c315cf9c346f0f0b15d8170b726b8ed05c2698eb7128e11f716cf3fca
      labels:
        app.kubernetes.io/name: bitbucket
        app.kubernetes.io/instance: unittest-bitbucket
    spec:
      serviceAccountName: unittest-bitbucket
      terminationGracePeriodSeconds: 35
      hostAliases:
        - hostnames:
          - foo.local
          - bar.local
          ip: 127.0.0.1
      securityContext:
        fsGroup: 2003
      initContainers:
        - name: fetch-jmx-exporter
          image: bitnami/jmx-exporter:0.18.0
          command: ["cp"]
          args: ["/opt/bitnami/jmx-exporter/jmx_prometheus_javaagent.jar", "/var/atlassian/application-data/shared-home"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: "/var/atlassian/application-data/shared-home"
              name: shared-home
      containers:
        - name: bitbucket
          image: "atlassian/bitbucket:8.19.8"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 7990
              protocol: TCP
            - name: ssh
              containerPort: 7999
              protocol: TCP
            - name: hazelcast
              containerPort: 5701
              protocol: TCP
            - name: jmx
              containerPort: 9999
              protocol: TCP
          readinessProbe:
            httpGet:
              port: 7990
              path: /status
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 60
          volumeMounts:
            - name: local-home
              mountPath: "/var/atlassian/application-data/bitbucket"
            - name: helm-values
              mountPath: /opt/atlassian/helm
            - name: jmx-config
              mountPath: /opt/atlassian/jmx
          resources:
            requests:
              cpu: "2"
              memory: 2G
          env:
            - name: KUBE_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: "-Dcluster.node.name=$(KUBE_POD_NAME)"
            - name: PLUGIN_SSH_PORT
              value: "7999"
            - name: SERVER_CONTEXT_PATH
              value: "/"
            - name: SERVER_PORT
              value: "7990"
            - name: SERVER_SCHEME
              value: "https"
            - name: SERVER_SECURE
              value: "true"
            - name: SET_PERMISSIONS
              value: "true"
            - name: JVM_MINIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: min_heap
                  name: unittest-bitbucket-jvm-config
            - name: JVM_MAXIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: max_heap
                  name: unittest-bitbucket-jvm-config
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              valueFrom:
                configMapKeyRef:
                  key: additional_jvm_args
                  name: unittest-bitbucket-jvm-config
            - name: APPLICATION_MODE
              value: "default"
            - name: JMX_ENABLED
              value: "true"
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "/shutdown-wait.sh"]
      priorityClassName: high
      volumes:
        - name: local-home
          emptyDir: {}
        - name: helm-values
          configMap:
            name: unittest-bitbucket-helm-values
        - name: jmx-config
          configMap:
            name: unittest-bitbucket-jmx-config
---
# Source: bitbucket/templates/tests/test-application-status.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "unittest-bitbucket-application-status-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
spec:
  containers:
    - name: test
      image: alpine:latest
      imagePullPolicy: IfNotPresent
      env:
        - name: STATUS_URL
          value: "http://unittest-bitbucket:80/status"
      command:
        - /bin/sh
        - -ec
        - |
          apk add -q jq curl
          STATUS=$(curl -s "$STATUS_URL")
          echo "Verifying application state is RUNNING or FIRST_RUN: $STATUS"
          echo $STATUS | jq -e '.state|test("RUNNING|FIRST_RUN")'
  restartPolicy: Never
---
# Source: bitbucket/templates/tests/test-shared-home-permissions.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "unittest-bitbucket-shared-home-permissions-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: bitbucket-1.21.2
    app.kubernetes.io/name: bitbucket
    app.kubernetes.io/instance: unittest-bitbucket
    app.kubernetes.io/version: "8.19.8"
    app.kubernetes.io/managed-by: Helm
spec:
  containers:
    - name: test
      image: debian:stable-slim
      imagePullPolicy: IfNotPresent
      securityContext:
        # We assume that the UID and GID used by the product images are the same, which in practice they are
        runAsUser: 2003
        runAsGroup: 2003
      volumeMounts:
        - name: local-home
          mountPath: /shared-home
          subPath: shared
      command:
        - /bin/sh
        - -ec
        - |
          ls -ld /shared-home
          echo "Creating temporary file in shared home as user $(id -u):$(id -g)"
          touch /shared-home/permissions-test
          ls -l /shared-home/permissions-test
          rm /shared-home/permissions-test
  volumes:
    - name: local-home
      emptyDir: {}
  restartPolicy: Never
