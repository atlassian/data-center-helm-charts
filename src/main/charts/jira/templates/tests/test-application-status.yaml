apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "common.names.fullname" . }}-application-status-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    {{- if not .Values.testPods.annotations }}
    {{- include "jira.podAnnotations" . | nindent 4 }}
    {{- else }}
    {{- range $key, $value := .Values.testPods.annotations }}
    {{ $key | quote }}: {{ tpl $value $ | quote }}
    {{- end }}
    {{- end }}
  labels:
    {{- if not .Values.testPods.labels }}
    {{- include "common.labels.commonLabels" . | nindent 4 }}
    {{- else }}
    {{- range $key, $value := .Values.testPods.labels }}
    {{ $key | quote }}: {{ tpl $value $ | quote }}
    {{- end }}
    {{- end }}
spec:
  containers:
    - name: test
      image: {{ .Values.testPods.image.statusTestContainer }}
      imagePullPolicy: IfNotPresent
      env:
        - name: STATUS_URL
          value: "http://{{ include "common.names.fullname" . }}:{{ .Values.jira.service.port }}/status"
      command:
        - /bin/sh
        - -ec
        - |
          apk add -q jq curl
          STATUS=$(curl -s "$STATUS_URL")
          echo "Verifying application state is RUNNING or FIRST_RUN: $STATUS"
          echo $STATUS | jq -e '.state|test("RUNNING|FIRST_RUN")'
      {{- with .Values.testPods.resources }}
      resources:
      {{- toYaml . | nindent 8 }}
      {{- end }}
  restartPolicy: Never
  {{- with .Values.testPods.nodeSelector }}
  nodeSelector:
  {{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.testPods.affinity }}
  affinity:
  {{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.testPods.tolerations }}
  tolerations:
  {{- toYaml . | nindent 8 }}
  {{- end }}
  {{- if .Values.testPods.schedulerName }}
  schedulerName: {{ .Values.testPods.schedulerName  | quote }}
  {{- end }}
