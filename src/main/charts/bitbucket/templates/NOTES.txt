Thank you for installing {{ title .Chart.Name }}.

Your release is named {{ .Release.Name }}, and resides in namespace {{ .Release.Namespace }}.

Please run sanity tests against the release to verify it's healthy:

  $ helm test {{ .Release.Name }} -n {{ .Release.Namespace }}

If the Kubernetes resources in the release are still starting up, then the tests may fail, so it
is advisable to wait for the tests to pass before continuing.

To see the custom values you used for this release:

  $ helm get values {{ .Release.Name }} -n {{ .Release.Namespace }}

{{ if .Values.ingress.create -}}
{{ title .Chart.Name }} service URL: {{ ternary "https" "http" .Values.ingress.https -}}://{{ .Values.ingress.host }}{{ include "bitbucket.ingressPath" . }}
{{- else }}
Get the {{ title .Chart.Name }} URL by running these commands in the same shell:
{{- if contains "NodePort" .Values.bitbucket.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ .Release.Name }}-{{ .Chart.Name }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.bitbucket.service.type }}
  NOTE: It may take a few minutes for the LoadBalancer hostname to be available.
        You can watch the status of by running 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ .Release.Name }}-{{ .Chart.Name }}'

  export SERVICE_HOSTNAME=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ .Release.Name }}-{{ .Chart.Name }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
  echo http://$SERVICE_HOSTNAME:{{ .Values.bitbucket.service.port }}
{{- else if contains "ClusterIP" .Values.bitbucket.service.type }}
  Step 1: Get the pod name
    $ export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  Step 2 (Optional): Check if the pod name has been exported successfully and the pod status
    $ echo POD_NAME: $POD_NAME && echo POD_STATUS: $(kubectl get pod $POD_NAME -o jsonpath='{.status.phase}')
  Step 3: Wait for pods up and running, then forward pod port to localhost
    $ kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME {{ .Values.bitbucket.ports.http }}
  Step 4: Access {{ title .Chart.Name }} on localhost:
    http://localhost:{{ .Values.bitbucket.ports.http }}
{{- end }}
{{- end }}
{{- if not ( or .Values.volumes.localHome.persistentVolumeClaim.create .Values.volumes.localHome.customVolume ) }}

#################################################################################
#####       WARNING: Persistent volume is not used for Local Home!!!        #####
#####             Data will be lost when the pod is terminated.             #####
#################################################################################
{{- end }}
{{/* Mirrors don't need a shared home - only show warning if clustering is enabled and no shared home volume is created */}}
{{/* the default can be removed in v2.0.0 */}}
{{- if and ( not ( or .Values.volumes.sharedHome.persistentVolumeClaim.create .Values.volumes.sharedHome.customVolume)) ( and .Values.bitbucket.clustering.enabled ( eq (default "" .Values.bitbucket.applicationMode) "default")) }}

#################################################################################
#####  WARNING: Clustering is enabled but Shared Home is not configured!!!  #####
#####            Nodes will not be able to form a cluster.                  #####
#################################################################################
{{- end }}
{{- if ( or .Values.bitbucket.securityContext.enabled .Values.bitbucket.securityContext.gid ) }}

#################################################################################
######     DEPRECATION WARNING: bitbucket.securityContext deprecation       #####
######   Update your values to the new bitbucket.securityContext format     #####
#################################################################################
{{- end}}

{{- if and (.Values.bitbucket.mesh.enabled) (not .Values.bitbucket.mesh.nodeAutoRegistration)}}

Bitbucket Mesh deployed. You can register Mesh nodes at {{ if .Values.ingress.create }}{{ ternary "https" "http" .Values.ingress.https -}}://{{ .Values.ingress.host }}{{ include "bitbucket.ingressPath" . }}{{ else }}${BITBUCKET_URL}{{ end }}/admin/git/mesh using the following URLs:

{{- range $index := until (.Values.bitbucket.mesh.replicaCount | int) }}
{{- with $ }}
  * http://{{ include "common.names.fullname" . }}-mesh-{{ $index }}:{{ .Values.bitbucket.mesh.service.port }}
{{- end }}
{{- end }}

{{ if eq .Values.bitbucket.mesh.service.type "LoadBalancer" }}
You may use LoadBalancer URLs to register Mesh nodes with Bitbucket server. Get LoadBalancer hostnames:

  $ for service in {0..2}; do kubectl get svc --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }}-mesh-$service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}; done
{{- end }}
{{- end }}

For further documentation, see https://atlassian.github.io/data-center-helm-charts/