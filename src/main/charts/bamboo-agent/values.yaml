## Atlassian Bamboo Data Center remote agent Helm values
#
# HEADS UP!
#
# A running and configured Bamboo server instance is a prerequisite for agent deployment!
# Ensure that a valid security token and Bamboo server base URL have been supplied for the
# relevant properties below i.e:
# - agent.securityToken
# - agent.server
#
# Additionally, the Bamboo server must have; "Remote agent authentication" *disabled* and
# "Security token verification" *enabled*. Details on these features and how to enable
# and disable them here:
# https://confluence.atlassian.com/bamboo/agent-authentication-289277196.html
##

# -- The initial number of Bamboo agent pods that should be started at deployment time.
#
replicaCount: 1

# Image configuration
#
image:

  # -- The Bamboo agent Docker image to use
  # https://hub.docker.com/r/atlassian/bamboo-agent-base
  #
  repository: atlassian/bamboo-agent-base

  # -- Image pull policy
  #
  pullPolicy: IfNotPresent

  # -- The docker image tag to be used - defaults to the Chart appVersion
  #
  tag: ""

# K8s ServiceAccount configuration. Give fine-grained identity and authorization
# to Pods
#
serviceAccount:

  # -- Set to 'true' if a ServiceAccount should be created, or 'false' if it
  # already exists.
  #
  create: true

  # -- The name of the ServiceAccount to be used by the pods. If not specified, but
  # the "serviceAccount.create" flag is set to 'true', then the ServiceAccount name
  # will be auto-generated, otherwise the 'default' ServiceAccount will be used.
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
  #
  name:

  # -- For Docker images hosted in private registries, define the list of image pull
  # secrets that should be utilized by the created ServiceAccount
  # https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  #
  imagePullSecrets: []
  # - name: secretName

  # -- Annotations to add to the ServiceAccount (if created)
  #
  annotations: {}

# Bamboo agent configuration
#
agent:

  # The security token with which the agent will authenticate to the Bamboo server
  # Additional details here:
  # https://confluence.atlassian.com/bamboo/agent-authentication-289277196.html#Agentauthentication-SecuritytokenverificationSecuritytokenverification
  #
  securityToken:

    # -- The name of the K8s Secret that contains the security token. When specified the token
    # will be automatically utilised on agent boot. An Example of creating a K8s secret for the
    # secret below:
    # 'kubectl create secret generic <secret-name> --from-literal=security-token=<security token>'
    # https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
    #
    secretName:

    secretKey: security-token

  # The K8s DNS record for the Bamboo server service. Should be of the form, <service_name>.<namespace>.svc.cluster.local
  # for example: "bamboo-server.bamboo.svc.cluster.local"
  #
  server:

  # Standard K8s field that holds pod-level security attributes and common container settings.
  # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  # Do not populate when deploying to OpenShift, unless anyuid policy is attached to a service account.

  # -- Whether to apply security context to pod.
  #
  securityContextEnabled: true

  securityContext:

    # -- The GID used by the Bamboo docker image
    # GID will default to 2005 if not supplied and securityContextEnabled is set to true.
    # This is intended to ensure that the shared-home volume is group-writeable by the GID used by the Bamboo container.
    # However, this doesn't appear to work for NFS volumes due to a K8s bug: https://github.com/kubernetes/examples/issues/260
    #
    fsGroup: 2005

  # -- Standard K8s field that holds security configurations that will be applied to a container.
  # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  #
  containerSecurityContext: { }

  # Confirm that the Bamboo agent is up and running with a startupProbe
  # and readinessProbe. The startupProbe waits until the wrapper and agent
  # are running, and the readinessProbes checks for it's continuing availability.
  # See: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/
  #
  # Currently the startup and readiness probes work in the same
  # manner, however having a separate startup probe allows us to spin
  # fast on startup, and then scale back for ongoing availability.
  startupProbe:

    # -- Command to use to check the startup status. This is provided by the agent image.
    #
    command: "/probe-startup.sh"

    # -- The initial delay (in seconds) for the Bamboo agent container startup probe,
    # after which the probe will start running.
    #
    initialDelaySeconds: 1

    # -- How often (in seconds) the Bamboo agent container startup probe will run
    #
    periodSeconds: 1

    # -- The number of consecutive failures of the Bamboo agent container startup probe
    # before the pod fails readiness checks.
    #
    failureThreshold: 120

  readinessProbe:

    # -- Command to use to check the readiness status. This is provided by the agent image.
    #
    command: "/probe-readiness.sh"

    # -- The initial delay (in seconds) for the Bamboo agent container
    # readiness probe, after which the probe will start running. When
    # used in conjunction with a startupProbe this can be short.
    #
    initialDelaySeconds: 1

    # -- How often (in seconds) the Bamboo agent container readiness probe will run
    #
    periodSeconds: 5

    # -- The number of consecutive failures of the Bamboo agent container readiness probe
    # before the pod fails readiness checks.
    #
    failureThreshold: 30

  shutdown:

    # -- The termination grace period for pods during shutdown. This
    # should be set to the internal grace period, plus a small buffer
    # to allow the JVM to fully terminate.
    #
    terminationGracePeriodSeconds: 30

    # -- Custom command for a [preStop hook](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/).
    # Undefined by default which means no pre-stop hook is being executed when an agent container needs to be stopped and deleted
    #
    command:

  # Pod resource requests
  #
  resources:

    # JVM Memory / Heap Size definitions. These values below are based on the
    # defaults defined for the Bamboo agent docker container.
    # https://bitbucket.org/atlassian-docker/docker-bamboo-agent-base
    #
    jvm:

      # -- The maximum amount of heap memory that will be used by the Bamboo agent JVM
      #
      maxHeap: "512m"

      # -- The minimum amount of heap memory that will be used by the Bamboo agent JVM
      #
      minHeap: "256m"

    # Specifies the standard K8s resource requests and/or limits for the Bamboo agent
    # container. It is important that if the memory resources are specified here,
    # they must allow for the size of the Bamboo agent JVM. That means the maximum heap
    # size, plus other JVM overheads, must be accommodated.
    # Allowing for (maxHeap)*1.5 would be an example.
    #
    container:

      requests:

        # -- Initial CPU request by Bamboo agent pod
        #
        cpu: "1" # If changing the cpu value update 'ActiveProcessorCount' below

        # -- Initial Memory request by Bamboo agent pod
        #
        memory: "2G"
      #  limits:
      #    cpu: "2"
      #    memory: "2G"

  # -- Defines any additional environment variables to be passed to the Bamboo agent
  # container. See https://bitbucket.org/atlassian-docker/docker-bamboo-agent-base for
  # supported variables.
  #
  additionalEnvironmentVariables: []

  # -- Defines any additional ports for the Bamboo agent container.
  #
  additionalPorts: []
  #  - name: jmx
  #    containerPort: 5555
  #    protocol: TCP

  # -- Defines any additional volume mounts for the Bamboo agent container. These
  # can refer to existing volumes, or new volumes can be defined via
  # 'volumes.additional'.
  #
  additionalVolumeMounts: {}

  # -- Defines topology spread constraints for Bamboo agent pods. See details:
  # https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  #
  topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: kubernetes.io/hostname
    #   whenUnsatisfiable: ScheduleAnyway
    #   labelSelector:
    #     matchLabels:


# -- Custom annotations that will be applied to all Bamboo agent pods
#
podAnnotations: {}
#  name: <value>

# -- Custom labels that will be applied to all Bamboo agent pods
#
podLabels: {}
#  name: <value>

# -- Standard K8s node-selectors that will be applied to all Bamboo agent pods
#
nodeSelector: {}
#  name: <value>

# -- Standard K8s tolerations that will be applied to all Bamboo agent pods
#
tolerations: []
# - effect: <name>
#   operator: <operator>
#   key: <key>

# -- Standard K8s affinities that will be applied to all Bamboo agent pods
#
affinity: {}
#  name: <value>

# -- Standard K8s schedulerName that will be applied to all Bamboo agent pods.
# Check Kubernetes documentation on how to configure multiple schedulers:
# https://kubernetes.io/docs/tasks/extend-kubernetes/configure-multiple-schedulers/#specify-schedulers-for-pods
#
schedulerName:

# -- Priority class for the application pods. The PriorityClass with this name needs to be available in the cluster.
# For details see https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
#
priorityClassName:

# -- Defines additional volumes that should be applied to all Bamboo agent pods.
# Note that this will not create any corresponding volume mounts
# which need to be defined in bamboo.additionalVolumeMounts
#
volumes:
  additional:

# -- Additional container definitions that will be added to all Bamboo agent pods
#
additionalContainers: []
#  - name: <name>
#    image: <image>:<tag>

# -- Additional initContainer definitions that will be added to all Bamboo agent pods
#
additionalInitContainers: []
#  - name: <name>
#    image: <image>:<tag>

# -- Additional labels that should be applied to all resources
#
additionalLabels: {}
#  name: <value>

# -- Additional existing ConfigMaps and Secrets not managed by Helm that should be
# mounted into service container. Configuration details below (camelCase is important!):
  # 'name'      - References existing ConfigMap or Secret name.
  # 'type'      - 'configMap' or 'secret'
  # 'key'       - The file name.
  # 'mountPath' - The destination directory in a container.
# VolumeMount and Volumes are added with this name and index position, for example;
# custom-config-0, keystore-2
#
additionalFiles: []
#  - name: custom-config
#    type: configMap
#    key: log4j.properties
#    mountPath:  /var/atlassian
#  - name: custom-config
#    type: configMap
#    key: web.xml
#    mountPath: /var/atlassian
#  - name: keystore
#    type: secret
#    key: keystore.jks
#    mountPath: /var/ssl

# -- Additional host aliases for each pod, equivalent to adding them to the /etc/hosts file.
# https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
additionalHosts: []
#  - ip: "127.0.0.1"
#    hostnames:
#    - "foo.local"
#    - "bar.local"
